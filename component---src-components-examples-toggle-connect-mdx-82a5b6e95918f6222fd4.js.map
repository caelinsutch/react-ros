{"version":3,"sources":["webpack:///../src/components/examples/ToggleConnect.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","ROS","ToggleConnect","isMDXComponent"],"mappings":"shBASO,IAAMA,EAAe,Q,2NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,iBADR,iBAGA,wGAAuF,mBAAGC,WAAW,KAAQ,CACzG,KAAQ,qDAD2E,oBAAvF,8IAMA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,qCAAsCC,SAAO,GAC9EL,QACAH,kBACAS,eACAC,QACAC,mBAL8E,gBAM9EX,IAN8E,EAO9EH,eAP8E,GAQ7EO,QAAQ,cACb,YAAC,IAAD,CAAKA,QAAQ,OACX,YAAC,IAAD,CAAeA,QAAQ,oBAGvB,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,mkB,yNAyBTJ,EAAWW,gBAAiB","file":"component---src-components-examples-toggle-connect-mdx-82a5b6e95918f6222fd4.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/flynn/code/web/ros/react-ros/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { ROS } from '../ROS';\nimport ToggleConnect from './ToggleConnect';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2 {...{\n      \"id\": \"toggleconnect\"\n    }}>{`ToggleConnect`}</h2>\n    <p>{`If you have ROS installed, go ahead and try out the demo below. Just start up a `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/RobotWebTools/rosbridge_suite\"\n      }}>{`rosbridge server`}</a>{` using the default parameters and hit the button - you should see your topics listed along with the status of the connection changing too.`}</p>\n\n\n\n    <Playground __position={0} __code={'<ROS>\\n  <ToggleConnect />\\n</ROS>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      ROS,\n      ToggleConnect,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ROS mdxType=\"ROS\">\n    <ToggleConnect mdxType=\"ToggleConnect\" />\n  </ROS>\n    </Playground>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from 'react'\nimport { useROS } from '../ROS'\n\nfunction ToggleConnect() {\n  const { isConnected, topics, url, toggleConnection } = useROS();\n\n  return (\n    <div>\n      <p><strong>ROS url:</strong> {url}</p>\n      <button onClick={ toggleConnection }>Toggle Connect</button>\n      <p><strong>Status of ROS:</strong> { isConnected ? \"connected\" : \"not connected\" }</p>\n      <p><strong>Topics detected:</strong></p>\n      { topics.map((topic, i) => <li key={i}>    {topic.path}</li> )}\n    </div>\n  );\n}\n\nexport default ToggleConnect;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}